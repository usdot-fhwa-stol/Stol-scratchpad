
/*** <<< INCLUDES [Message1] >>> ***/

#include "SpecializedContent.h"
#include <constr_SEQUENCE.h>

/*** <<< TYPE-DECLS [Message1] >>> ***/

typedef struct Message1 {
	TotalRegionExtension_t	 content;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Message1_t;

/*** <<< FUNC-DECLS [Message1] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Message1;

/*** <<< STAT-DEFS [Message1] >>> ***/

static asn_TYPE_member_t asn_MBR_Message1_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Message1, content),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_TotalRegionExtension,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "content"
		},
};
static const ber_tlv_tag_t asn_DEF_Message1_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_Message1_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)), 0, 0, 0 } /* content */
};
static asn_SEQUENCE_specifics_t asn_SPC_Message1_specs_1 = {
	sizeof(struct Message1),
	offsetof(struct Message1, _asn_ctx),
	.tag2el = asn_MAP_Message1_tag2el_1,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_Message1 = {
	"Message1",
	"Message1",
	&asn_OP_SEQUENCE,
	asn_DEF_Message1_tags_1,
	sizeof(asn_DEF_Message1_tags_1)
		/sizeof(asn_DEF_Message1_tags_1[0]), /* 1 */
	asn_DEF_Message1_tags_1,	/* Same as above */
	sizeof(asn_DEF_Message1_tags_1)
		/sizeof(asn_DEF_Message1_tags_1[0]), /* 1 */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		SEQUENCE_constraint
	},
	asn_MBR_Message1_1,
	1,	/* Elements count */
	&asn_SPC_Message1_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [Message2] >>> ***/

#include "SpecializedContent.h"
#include <constr_SEQUENCE.h>

/*** <<< TYPE-DECLS [Message2] >>> ***/

typedef struct Message2 {
	RegionalExtension3_t	 content;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Message2_t;

/*** <<< FUNC-DECLS [Message2] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Message2;

/*** <<< STAT-DEFS [Message2] >>> ***/

static asn_TYPE_member_t asn_MBR_Message2_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Message2, content),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_RegionalExtension3,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "content"
		},
};
static const ber_tlv_tag_t asn_DEF_Message2_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_Message2_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)), 0, 0, 0 } /* content */
};
static asn_SEQUENCE_specifics_t asn_SPC_Message2_specs_1 = {
	sizeof(struct Message2),
	offsetof(struct Message2, _asn_ctx),
	.tag2el = asn_MAP_Message2_tag2el_1,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_Message2 = {
	"Message2",
	"Message2",
	&asn_OP_SEQUENCE,
	asn_DEF_Message2_tags_1,
	sizeof(asn_DEF_Message2_tags_1)
		/sizeof(asn_DEF_Message2_tags_1[0]), /* 1 */
	asn_DEF_Message2_tags_1,	/* Same as above */
	sizeof(asn_DEF_Message2_tags_1)
		/sizeof(asn_DEF_Message2_tags_1[0]), /* 1 */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		SEQUENCE_constraint
	},
	asn_MBR_Message2_1,
	1,	/* Elements count */
	&asn_SPC_Message2_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [Message3] >>> ***/

#include "SpecializedContent.h"
#include <constr_SEQUENCE.h>

/*** <<< TYPE-DECLS [Message3] >>> ***/

typedef struct Message3 {
	RegionalExtension4_t	 content;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Message3_t;

/*** <<< FUNC-DECLS [Message3] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Message3;

/*** <<< STAT-DEFS [Message3] >>> ***/

static asn_TYPE_member_t asn_MBR_Message3_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Message3, content),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_RegionalExtension4,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "content"
		},
};
static const ber_tlv_tag_t asn_DEF_Message3_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_Message3_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)), 0, 0, 0 } /* content */
};
static asn_SEQUENCE_specifics_t asn_SPC_Message3_specs_1 = {
	sizeof(struct Message3),
	offsetof(struct Message3, _asn_ctx),
	.tag2el = asn_MAP_Message3_tag2el_1,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_Message3 = {
	"Message3",
	"Message3",
	&asn_OP_SEQUENCE,
	asn_DEF_Message3_tags_1,
	sizeof(asn_DEF_Message3_tags_1)
		/sizeof(asn_DEF_Message3_tags_1[0]), /* 1 */
	asn_DEF_Message3_tags_1,	/* Same as above */
	sizeof(asn_DEF_Message3_tags_1)
		/sizeof(asn_DEF_Message3_tags_1[0]), /* 1 */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		SEQUENCE_constraint
	},
	asn_MBR_Message3_1,
	1,	/* Elements count */
	&asn_SPC_Message3_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [SpecializedContent] >>> ***/

#include <NativeInteger.h>
#include <ANY.h>
#include <asn_ioc.h>
#include <BOOLEAN.h>
#include <OCTET_STRING.h>
#include <OPEN_TYPE.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>

/*** <<< DEPS [SpecializedContent] >>> ***/

typedef enum TotalRegionExtension__value_PR {
	TotalRegionExtension__value_PR_NOTHING,	/* No components present */
	TotalRegionExtension__value_PR_INTEGER,
	TotalRegionExtension__value_PR_BOOLEAN,
	TotalRegionExtension__value_PR_OCTET_STRING,
	TotalRegionExtension__value_PR_INTEGER_1,
	TotalRegionExtension__value_PR_BOOLEAN_1,
	TotalRegionExtension__value_PR_OCTET_STRING_1
} TotalRegionExtension__value_PR;
typedef enum RegionalExtension3__value_PR {
	RegionalExtension3__value_PR_NOTHING,	/* No components present */
	RegionalExtension3__value_PR_OCTET_STRING,
	RegionalExtension3__value_PR_OCTET_STRING_1
} RegionalExtension3__value_PR;
typedef enum RegionalExtension4__value_PR {
	RegionalExtension4__value_PR_NOTHING,	/* No components present */
	RegionalExtension4__value_PR_INTEGER,
	RegionalExtension4__value_PR_OCTET_STRING_5_
} RegionalExtension4__value_PR;

/*** <<< TYPE-DECLS [SpecializedContent] >>> ***/

typedef struct TotalRegionExtension {
	long	 id;
	struct TotalRegionExtension__value {
		TotalRegionExtension__value_PR present;
		union TotalRegionExtension__value_u {
			long	 INTEGER;
			BOOLEAN_t	 BOOLEAN;
			OCTET_STRING_t	 OCTET_STRING;
			long	 INTEGER_1;
			BOOLEAN_t	 BOOLEAN_1;
			OCTET_STRING_t	 OCTET_STRING_1;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} value;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} TotalRegionExtension_t;
typedef struct RegionalExtension3 {
	long	 id;
	struct RegionalExtension3__value {
		RegionalExtension3__value_PR present;
		union RegionalExtension3__value_u {
			OCTET_STRING_t	 OCTET_STRING;
			OCTET_STRING_t	 OCTET_STRING_1;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} value;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} RegionalExtension3_t;
typedef struct RegionalExtension4 {
	long	 id;
	struct RegionalExtension4__value {
		RegionalExtension4__value_PR present;
		union RegionalExtension4__value_u {
			long	 INTEGER;
			OCTET_STRING_t	 OCTET_STRING_5_;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} value;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} RegionalExtension4_t;

/*** <<< FUNC-DECLS [SpecializedContent] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_TotalRegionExtension;
extern asn_SEQUENCE_specifics_t asn_SPC_TotalRegionExtension_specs_1;
extern asn_TYPE_member_t asn_MBR_TotalRegionExtension_1[2];
extern asn_TYPE_descriptor_t asn_DEF_RegionalExtension3;
extern asn_SEQUENCE_specifics_t asn_SPC_RegionalExtension3_specs_4;
extern asn_TYPE_member_t asn_MBR_RegionalExtension3_4[2];
extern asn_TYPE_descriptor_t asn_DEF_RegionalExtension4;
extern asn_SEQUENCE_specifics_t asn_SPC_RegionalExtension4_specs_7;
extern asn_TYPE_member_t asn_MBR_RegionalExtension4_7[2];

/*** <<< IOC-TABLES [SpecializedContent] >>> ***/

static const long asn_VAL_1_1 = 1;
static const long asn_VAL_2_2 = 2;
static const long asn_VAL_3_3 = 3;
static const long asn_VAL_4_1 = 1;
static const long asn_VAL_5_2 = 2;
static const long asn_VAL_6_3 = 3;
static const asn_ioc_cell_t asn_IOS_TotalRegionExtension_1_rows[] = {
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_1_1 },
	{ "&Type", aioc__type, &asn_DEF_NativeInteger },
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_2_2 },
	{ "&Type", aioc__type, &asn_DEF_BOOLEAN },
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_3_3 },
	{ "&Type", aioc__type, &asn_DEF_OCTET_STRING },
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_4_1 },
	{ "&Type", aioc__type, &asn_DEF_NativeInteger },
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_5_2 },
	{ "&Type", aioc__type, &asn_DEF_BOOLEAN },
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_6_3 },
	{ "&Type", aioc__type, &asn_DEF_OCTET_STRING }
};
static const asn_ioc_set_t asn_IOS_TotalRegionExtension_1[] = {
	{ 6, 2, asn_IOS_TotalRegionExtension_1_rows }
};
static const long asn_VAL_7_1 = 1;
static const long asn_VAL_8_4 = 4;
static const asn_ioc_cell_t asn_IOS_RegionalExtension3_1_rows[] = {
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_7_1 },
	{ "&Type", aioc__type, &asn_DEF_OCTET_STRING },
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_8_4 },
	{ "&Type", aioc__type, &asn_DEF_OCTET_STRING }
};
static const asn_ioc_set_t asn_IOS_RegionalExtension3_1[] = {
	{ 2, 2, asn_IOS_RegionalExtension3_1_rows }
};
static const long asn_VAL_9_5 = 5;
static const long asn_VAL_10_6 = 6;
static const asn_ioc_cell_t asn_IOS_RegionalExtension4_1_rows[] = {
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_9_5 },
	{ "&Type", aioc__type, &asn_DEF_NativeInteger },
	{ "&id", aioc__value, &asn_DEF_NativeInteger, &asn_VAL_10_6 },
	{ "&Type", aioc__type, &asn_DEF_OCTET_STRING }
};
static const asn_ioc_set_t asn_IOS_RegionalExtension4_1[] = {
	{ 2, 2, asn_IOS_RegionalExtension4_1_rows }
};

/*** <<< CODE [SpecializedContent] >>> ***/

static int
memb_id_constraint_1(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	return td->encoding_constraints.general_constraints(td, sptr, ctfailcb, app_key);
}

static asn_type_selector_result_t
select_TotalRegionExtension_value_type(const asn_TYPE_descriptor_t *parent_type, const void *parent_sptr) {
	asn_type_selector_result_t result = {0, 0};
	const asn_ioc_set_t *itable = asn_IOS_TotalRegionExtension_1;
	size_t constraining_column = 0; /* &id */
	size_t for_column = 1; /* &Type */
	size_t row, presence_index = 0;
	const long *constraining_value = (const long *)((const char *)parent_sptr + offsetof(struct TotalRegionExtension, id));
	
	for(row=0; row < itable->rows_count; row++) {
	    const asn_ioc_cell_t *constraining_cell = &itable->rows[row * itable->columns_count + constraining_column];
	    const asn_ioc_cell_t *type_cell = &itable->rows[row * itable->columns_count + for_column];
	
	    if(type_cell->cell_kind == aioc__undefined)
	        continue;
	
	    presence_index++;
	    if(constraining_cell->type_descriptor->op->compare_struct(constraining_cell->type_descriptor, constraining_value, constraining_cell->value_sptr) == 0) {
	        result.type_descriptor = type_cell->type_descriptor;
	        result.presence_index = presence_index;
	        break;
	    }
	}
	
	return result;
}

static int
memb_value_constraint_1(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	return td->encoding_constraints.general_constraints(td, sptr, ctfailcb, app_key);
}

static int
memb_id_constraint_4(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	return td->encoding_constraints.general_constraints(td, sptr, ctfailcb, app_key);
}

static asn_type_selector_result_t
select_RegionalExtension3_value_type(const asn_TYPE_descriptor_t *parent_type, const void *parent_sptr) {
	asn_type_selector_result_t result = {0, 0};
	const asn_ioc_set_t *itable = asn_IOS_RegionalExtension3_1;
	size_t constraining_column = 0; /* &id */
	size_t for_column = 1; /* &Type */
	size_t row, presence_index = 0;
	const long *constraining_value = (const long *)((const char *)parent_sptr + offsetof(struct RegionalExtension3, id));
	
	for(row=0; row < itable->rows_count; row++) {
	    const asn_ioc_cell_t *constraining_cell = &itable->rows[row * itable->columns_count + constraining_column];
	    const asn_ioc_cell_t *type_cell = &itable->rows[row * itable->columns_count + for_column];
	
	    if(type_cell->cell_kind == aioc__undefined)
	        continue;
	
	    presence_index++;
	    if(constraining_cell->type_descriptor->op->compare_struct(constraining_cell->type_descriptor, constraining_value, constraining_cell->value_sptr) == 0) {
	        result.type_descriptor = type_cell->type_descriptor;
	        result.presence_index = presence_index;
	        break;
	    }
	}
	
	return result;
}

static int
memb_value_constraint_4(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	return td->encoding_constraints.general_constraints(td, sptr, ctfailcb, app_key);
}

static int
memb_OCTET_STRING_5__constraint_9(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const OCTET_STRING_t *st = (const OCTET_STRING_t *)sptr;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		(void)st; /* Unused variable */
		/* Nothing is here. See below */
	}
	
	return td->encoding_constraints.general_constraints(td, sptr, ctfailcb, app_key);
}

static int
memb_id_constraint_7(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	return td->encoding_constraints.general_constraints(td, sptr, ctfailcb, app_key);
}

static asn_type_selector_result_t
select_RegionalExtension4_value_type(const asn_TYPE_descriptor_t *parent_type, const void *parent_sptr) {
	asn_type_selector_result_t result = {0, 0};
	const asn_ioc_set_t *itable = asn_IOS_RegionalExtension4_1;
	size_t constraining_column = 0; /* &id */
	size_t for_column = 1; /* &Type */
	size_t row, presence_index = 0;
	const long *constraining_value = (const long *)((const char *)parent_sptr + offsetof(struct RegionalExtension4, id));
	
	for(row=0; row < itable->rows_count; row++) {
	    const asn_ioc_cell_t *constraining_cell = &itable->rows[row * itable->columns_count + constraining_column];
	    const asn_ioc_cell_t *type_cell = &itable->rows[row * itable->columns_count + for_column];
	
	    if(type_cell->cell_kind == aioc__undefined)
	        continue;
	
	    presence_index++;
	    if(constraining_cell->type_descriptor->op->compare_struct(constraining_cell->type_descriptor, constraining_value, constraining_cell->value_sptr) == 0) {
	        result.type_descriptor = type_cell->type_descriptor;
	        result.presence_index = presence_index;
	        break;
	    }
	}
	
	return result;
}

static int
memb_value_constraint_7(const asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	return td->encoding_constraints.general_constraints(td, sptr, ctfailcb, app_key);
}


/*** <<< CTDEFS [SpecializedContent] >>> ***/

#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_memb_id_constr_2 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_memb_value_constr_3 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_memb_id_constr_5 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_memb_value_constr_6 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_memb_OCTET_STRING_5__constr_10 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_SEMI_CONSTRAINED,	-1, -1,  0,  0 }	/* (SIZE(0..MAX)) */,
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_memb_id_constr_8 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_memb_value_constr_9 CC_NOTUSED = {
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */

/*** <<< STAT-DEFS [SpecializedContent] >>> ***/

static asn_TYPE_member_t asn_MBR_value_3[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension__value, choice.INTEGER),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "INTEGER"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension__value, choice.BOOLEAN),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (1 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_BOOLEAN,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "BOOLEAN"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension__value, choice.OCTET_STRING),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "OCTET STRING"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension__value, choice.INTEGER_1),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "INTEGER"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension__value, choice.BOOLEAN_1),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (1 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_BOOLEAN,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "BOOLEAN"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension__value, choice.OCTET_STRING_1),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "OCTET STRING"
		},
};
static const unsigned asn_MAP_value_to_canonical_3[] = { 1, 4, 0, 3, 2, 5 };
static const unsigned asn_MAP_value_from_canonical_3[] = { 2, 0, 4, 3, 1, 5 };
static const asn_TYPE_tag2member_t asn_MAP_value_tag2el_3[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (1 << 2)), 1, 0, 1 }, /* BOOLEAN */
    { (ASN_TAG_CLASS_UNIVERSAL | (1 << 2)), 4, -1, 0 }, /* BOOLEAN */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 1 }, /* INTEGER */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 3, -1, 0 }, /* INTEGER */
    { (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)), 2, 0, 1 }, /* OCTET STRING */
    { (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)), 5, -1, 0 } /* OCTET STRING */
};
static asn_CHOICE_specifics_t asn_SPC_value_specs_3 = {
	sizeof(struct TotalRegionExtension__value),
	offsetof(struct TotalRegionExtension__value, _asn_ctx),
	offsetof(struct TotalRegionExtension__value, present),
	sizeof(((struct TotalRegionExtension__value *)0)->present),
	.tag2el = asn_MAP_value_tag2el_3,
	.tag2el_count = 6,	/* Count of tags in the map */
	.to_canonical_order = asn_MAP_value_to_canonical_3,
	.from_canonical_order = asn_MAP_value_from_canonical_3,
	.first_extension = -1	/* Extensions start */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_value_3 = {
	"value",
	"value",
	&asn_OP_OPEN_TYPE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		OPEN_TYPE_constraint
	},
	asn_MBR_value_3,
	6,	/* Elements count */
	&asn_SPC_value_specs_3	/* Additional specs */
};

asn_TYPE_member_t asn_MBR_TotalRegionExtension_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension, id),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = &asn_PER_memb_id_constr_2,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = memb_id_constraint_1
		},
		0, 0, /* No default value */
		.name = "id"
		},
	{ ATF_OPEN_TYPE | ATF_NOFLAGS, 0, offsetof(struct TotalRegionExtension, value),
		.tag = -1 /* Ambiguous tag (ANY?) */,
		.tag_mode = 0,
		.type = &asn_DEF_value_3,
		.type_selector = select_TotalRegionExtension_value_type,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = &asn_PER_memb_value_constr_3,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = memb_value_constraint_1
		},
		0, 0, /* No default value */
		.name = "value"
		},
};
static const ber_tlv_tag_t asn_DEF_TotalRegionExtension_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_TotalRegionExtension_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 0 } /* id */
};
asn_SEQUENCE_specifics_t asn_SPC_TotalRegionExtension_specs_1 = {
	sizeof(struct TotalRegionExtension),
	offsetof(struct TotalRegionExtension, _asn_ctx),
	.tag2el = asn_MAP_TotalRegionExtension_tag2el_1,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_TotalRegionExtension = {
	"TotalRegionExtension",
	"TotalRegionExtension",
	&asn_OP_SEQUENCE,
	asn_DEF_TotalRegionExtension_tags_1,
	sizeof(asn_DEF_TotalRegionExtension_tags_1)
		/sizeof(asn_DEF_TotalRegionExtension_tags_1[0]), /* 1 */
	asn_DEF_TotalRegionExtension_tags_1,	/* Same as above */
	sizeof(asn_DEF_TotalRegionExtension_tags_1)
		/sizeof(asn_DEF_TotalRegionExtension_tags_1[0]), /* 1 */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		SEQUENCE_constraint
	},
	asn_MBR_TotalRegionExtension_1,
	2,	/* Elements count */
	&asn_SPC_TotalRegionExtension_specs_1	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_value_6[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct RegionalExtension3__value, choice.OCTET_STRING),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "OCTET STRING"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct RegionalExtension3__value, choice.OCTET_STRING_1),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "OCTET STRING"
		},
};
static const asn_TYPE_tag2member_t asn_MAP_value_tag2el_6[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)), 0, 0, 1 }, /* OCTET STRING */
    { (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)), 1, -1, 0 } /* OCTET STRING */
};
static asn_CHOICE_specifics_t asn_SPC_value_specs_6 = {
	sizeof(struct RegionalExtension3__value),
	offsetof(struct RegionalExtension3__value, _asn_ctx),
	offsetof(struct RegionalExtension3__value, present),
	sizeof(((struct RegionalExtension3__value *)0)->present),
	.tag2el = asn_MAP_value_tag2el_6,
	.tag2el_count = 2,	/* Count of tags in the map */
	0, 0,
	.first_extension = -1	/* Extensions start */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_value_6 = {
	"value",
	"value",
	&asn_OP_OPEN_TYPE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		OPEN_TYPE_constraint
	},
	asn_MBR_value_6,
	2,	/* Elements count */
	&asn_SPC_value_specs_6	/* Additional specs */
};

asn_TYPE_member_t asn_MBR_RegionalExtension3_4[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct RegionalExtension3, id),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = &asn_PER_memb_id_constr_5,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = memb_id_constraint_4
		},
		0, 0, /* No default value */
		.name = "id"
		},
	{ ATF_OPEN_TYPE | ATF_NOFLAGS, 0, offsetof(struct RegionalExtension3, value),
		.tag = -1 /* Ambiguous tag (ANY?) */,
		.tag_mode = 0,
		.type = &asn_DEF_value_6,
		.type_selector = select_RegionalExtension3_value_type,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = &asn_PER_memb_value_constr_6,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = memb_value_constraint_4
		},
		0, 0, /* No default value */
		.name = "value"
		},
};
static const ber_tlv_tag_t asn_DEF_RegionalExtension3_tags_4[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_RegionalExtension3_tag2el_4[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 0 } /* id */
};
asn_SEQUENCE_specifics_t asn_SPC_RegionalExtension3_specs_4 = {
	sizeof(struct RegionalExtension3),
	offsetof(struct RegionalExtension3, _asn_ctx),
	.tag2el = asn_MAP_RegionalExtension3_tag2el_4,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_RegionalExtension3 = {
	"RegionalExtension3",
	"RegionalExtension3",
	&asn_OP_SEQUENCE,
	asn_DEF_RegionalExtension3_tags_4,
	sizeof(asn_DEF_RegionalExtension3_tags_4)
		/sizeof(asn_DEF_RegionalExtension3_tags_4[0]), /* 1 */
	asn_DEF_RegionalExtension3_tags_4,	/* Same as above */
	sizeof(asn_DEF_RegionalExtension3_tags_4)
		/sizeof(asn_DEF_RegionalExtension3_tags_4[0]), /* 1 */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		SEQUENCE_constraint
	},
	asn_MBR_RegionalExtension3_4,
	2,	/* Elements count */
	&asn_SPC_RegionalExtension3_specs_4	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_value_9[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct RegionalExtension4__value, choice.INTEGER),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "INTEGER"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct RegionalExtension4__value, choice.OCTET_STRING_5_),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = &asn_PER_memb_OCTET_STRING_5__constr_10,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = memb_OCTET_STRING_5__constraint_9
		},
		0, 0, /* No default value */
		.name = "OCTET STRING (5)"
		},
};
static const asn_TYPE_tag2member_t asn_MAP_value_tag2el_9[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 0 }, /* INTEGER */
    { (ASN_TAG_CLASS_UNIVERSAL | (4 << 2)), 1, 0, 0 } /* OCTET STRING (5) */
};
static asn_CHOICE_specifics_t asn_SPC_value_specs_9 = {
	sizeof(struct RegionalExtension4__value),
	offsetof(struct RegionalExtension4__value, _asn_ctx),
	offsetof(struct RegionalExtension4__value, present),
	sizeof(((struct RegionalExtension4__value *)0)->present),
	.tag2el = asn_MAP_value_tag2el_9,
	.tag2el_count = 2,	/* Count of tags in the map */
	0, 0,
	.first_extension = -1	/* Extensions start */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_value_9 = {
	"value",
	"value",
	&asn_OP_OPEN_TYPE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		OPEN_TYPE_constraint
	},
	asn_MBR_value_9,
	2,	/* Elements count */
	&asn_SPC_value_specs_9	/* Additional specs */
};

asn_TYPE_member_t asn_MBR_RegionalExtension4_7[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct RegionalExtension4, id),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = &asn_PER_memb_id_constr_8,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = memb_id_constraint_7
		},
		0, 0, /* No default value */
		.name = "id"
		},
	{ ATF_OPEN_TYPE | ATF_NOFLAGS, 0, offsetof(struct RegionalExtension4, value),
		.tag = -1 /* Ambiguous tag (ANY?) */,
		.tag_mode = 0,
		.type = &asn_DEF_value_9,
		.type_selector = select_RegionalExtension4_value_type,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = &asn_PER_memb_value_constr_9,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = memb_value_constraint_7
		},
		0, 0, /* No default value */
		.name = "value"
		},
};
static const ber_tlv_tag_t asn_DEF_RegionalExtension4_tags_7[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_RegionalExtension4_tag2el_7[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 0 } /* id */
};
asn_SEQUENCE_specifics_t asn_SPC_RegionalExtension4_specs_7 = {
	sizeof(struct RegionalExtension4),
	offsetof(struct RegionalExtension4, _asn_ctx),
	.tag2el = asn_MAP_RegionalExtension4_tag2el_7,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_RegionalExtension4 = {
	"RegionalExtension4",
	"RegionalExtension4",
	&asn_OP_SEQUENCE,
	asn_DEF_RegionalExtension4_tags_7,
	sizeof(asn_DEF_RegionalExtension4_tags_7)
		/sizeof(asn_DEF_RegionalExtension4_tags_7[0]), /* 1 */
	asn_DEF_RegionalExtension4_tags_7,	/* Same as above */
	sizeof(asn_DEF_RegionalExtension4_tags_7)
		/sizeof(asn_DEF_RegionalExtension4_tags_7[0]), /* 1 */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		SEQUENCE_constraint
	},
	asn_MBR_RegionalExtension4_7,
	2,	/* Elements count */
	&asn_SPC_RegionalExtension4_specs_7	/* Additional specs */
};


/*** <<< INCLUDES [EXTERNAL] >>> ***/

#include <OBJECT_IDENTIFIER.h>
#include <NativeInteger.h>
#include <ObjectDescriptor.h>
#include <ANY.h>
#include <OCTET_STRING.h>
#include <BIT_STRING.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>

/*** <<< DEPS [EXTERNAL] >>> ***/

typedef enum EXTERNAL__encoding_PR {
	EXTERNAL__encoding_PR_NOTHING,	/* No components present */
	EXTERNAL__encoding_PR_single_ASN1_type,
	EXTERNAL__encoding_PR_octet_aligned,
	EXTERNAL__encoding_PR_arbitrary
} EXTERNAL__encoding_PR;

/*** <<< TYPE-DECLS [EXTERNAL] >>> ***/

typedef struct EXTERNAL {
	OBJECT_IDENTIFIER_t	*direct_reference;	/* OPTIONAL */
	long	*indirect_reference;	/* OPTIONAL */
	ObjectDescriptor_t	*data_value_descriptor;	/* OPTIONAL */
	struct EXTERNAL__encoding {
		EXTERNAL__encoding_PR present;
		union EXTERNAL__encoding_u {
			ANY_t	 single_ASN1_type;
			OCTET_STRING_t	 octet_aligned;
			BIT_STRING_t	 arbitrary;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} encoding;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} EXTERNAL_t;

/*** <<< FUNC-DECLS [EXTERNAL] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_EXTERNAL;

/*** <<< CTDEFS [EXTERNAL] >>> ***/

#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
static asn_per_constraints_t asn_PER_type_encoding_constr_5 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 2,  2,  0,  2 }	/* (0..2) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */

/*** <<< STAT-DEFS [EXTERNAL] >>> ***/

static asn_TYPE_member_t asn_MBR_encoding_5[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct EXTERNAL__encoding, choice.single_ASN1_type),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = +1,	/* EXPLICIT tag at current level */
		.type = &asn_DEF_ANY,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "single-ASN1-type"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct EXTERNAL__encoding, choice.octet_aligned),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "octet-aligned"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct EXTERNAL__encoding, choice.arbitrary),
		.tag = (ASN_TAG_CLASS_CONTEXT | (2 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_BIT_STRING,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "arbitrary"
		},
};
static const asn_TYPE_tag2member_t asn_MAP_encoding_tag2el_5[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* single-ASN1-type */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 }, /* octet-aligned */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 2, 0, 0 } /* arbitrary */
};
static asn_CHOICE_specifics_t asn_SPC_encoding_specs_5 = {
	sizeof(struct EXTERNAL__encoding),
	offsetof(struct EXTERNAL__encoding, _asn_ctx),
	offsetof(struct EXTERNAL__encoding, present),
	sizeof(((struct EXTERNAL__encoding *)0)->present),
	.tag2el = asn_MAP_encoding_tag2el_5,
	.tag2el_count = 3,	/* Count of tags in the map */
	0, 0,
	.first_extension = -1	/* Extensions start */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_encoding_5 = {
	"encoding",
	"encoding",
	&asn_OP_CHOICE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		&asn_PER_type_encoding_constr_5,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		CHOICE_constraint
	},
	asn_MBR_encoding_5,
	3,	/* Elements count */
	&asn_SPC_encoding_specs_5	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_EXTERNAL_1[] = {
	{ ATF_POINTER, 3, offsetof(struct EXTERNAL, direct_reference),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (6 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OBJECT_IDENTIFIER,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "direct-reference"
		},
	{ ATF_POINTER, 2, offsetof(struct EXTERNAL, indirect_reference),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "indirect-reference"
		},
	{ ATF_POINTER, 1, offsetof(struct EXTERNAL, data_value_descriptor),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (7 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_ObjectDescriptor,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "data-value-descriptor"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct EXTERNAL, encoding),
		.tag = -1 /* Ambiguous tag (CHOICE?) */,
		.tag_mode = 0,
		.type = &asn_DEF_encoding_5,
		.type_selector = 0,
		{
#if !defined(ASN_DISABLE_OER_SUPPORT)
			.oer_constraints = 0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
			.per_constraints = 0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
			.general_constraints = 0
		},
		0, 0, /* No default value */
		.name = "encoding"
		},
};
static const int asn_MAP_EXTERNAL_oms_1[] = { 0, 1, 2 };
static const ber_tlv_tag_t asn_DEF_EXTERNAL_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (8 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_EXTERNAL_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 1, 0, 0 }, /* indirect-reference */
    { (ASN_TAG_CLASS_UNIVERSAL | (6 << 2)), 0, 0, 0 }, /* direct-reference */
    { (ASN_TAG_CLASS_UNIVERSAL | (7 << 2)), 2, 0, 0 }, /* data-value-descriptor */
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 3, 0, 0 }, /* single-ASN1-type */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 3, 0, 0 }, /* octet-aligned */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 3, 0, 0 } /* arbitrary */
};
static asn_SEQUENCE_specifics_t asn_SPC_EXTERNAL_specs_1 = {
	sizeof(struct EXTERNAL),
	offsetof(struct EXTERNAL, _asn_ctx),
	.tag2el = asn_MAP_EXTERNAL_tag2el_1,
	.tag2el_count = 6,	/* Count of tags in the map */
	asn_MAP_EXTERNAL_oms_1,	/* Optional members */
	3, 0,	/* Root/Additions */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_EXTERNAL = {
	"EXTERNAL",
	"EXTERNAL",
	&asn_OP_SEQUENCE,
	asn_DEF_EXTERNAL_tags_1,
	sizeof(asn_DEF_EXTERNAL_tags_1)
		/sizeof(asn_DEF_EXTERNAL_tags_1[0]) - 1, /* 1 */
	asn_DEF_EXTERNAL_tags_1,	/* Same as above */
	sizeof(asn_DEF_EXTERNAL_tags_1)
		/sizeof(asn_DEF_EXTERNAL_tags_1[0]), /* 2 */
	{
#if !defined(ASN_DISABLE_OER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_OER_SUPPORT) */
#if !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT)
		0,
#endif  /* !defined(ASN_DISABLE_UPER_SUPPORT) || !defined(ASN_DISABLE_APER_SUPPORT) */
		SEQUENCE_constraint
	},
	asn_MBR_EXTERNAL_1,
	4,	/* Elements count */
	&asn_SPC_EXTERNAL_specs_1	/* Additional specs */
};

