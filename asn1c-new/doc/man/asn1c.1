.\"t
.\" Automatically generated by Pandoc 2.10.1
.\"
.ad l
.TH "asn1c" "1" "2017-09-01" "ASN.1 Compiler" "Version 0.9.29"
.nh
.SH NAME
.PP
asn1c \[en] the ASN.1 Compiler
.SH SYNOPSIS
.PP
asn1c [\f[B]-E\f[R] [\f[B]-F\f[R]] | \f[B]-P\f[R] | \f[B]-R\f[R]]
.PD 0
.P
.PD
[\f[B]-S\f[R]\f[I]dir\f[R]] [\f[B]-X\f[R]]
.PD 0
.P
.PD
[\f[B]-W\f[R]\f[I]debug-\f[R]\&...] [\f[B]-f\f[R]\f[I]option\f[R]]
[\f[B]-gen-\f[R]\f[I]option\f[R]]
[\f[B]-pdu\f[R]={\f[B]all\f[R]|\f[B]auto\f[R]|\f[I]Type\f[R]}]
.PD 0
.P
.PD
[\f[B]-print-\f[R]\f[I]option\f[R]]
.PD 0
.P
.PD
\f[I]input-filenames\f[R]\&...
.SH DESCRIPTION
.PP
asn1c compiles ASN.1 specifications into a set of target language
(C/C++) encoders and decoders for BER, DER, PER, XER, OER and other
encoding rules.
.SH OPTIONS
.SS Stage Selection Options
.TP
-E
Run the parsing stage only.
Print the reconstructed ASN.1 text.
.TP
-F
Used together with \f[B]-E\f[R], instructs the compiler to stop after
the ASN.1 syntax tree fixing stage and dump the reconstructed ASN.1
specification to the standard output.
.TP
-P
Dump the compiled output to the standard output instead of creating the
target language files on disk.
.TP
-R
Restrict the compiler to generate only the ASN.1 tables, omitting the
usual support code.
.TP
-S \f[I]directory\f[R]
Use the specified directory with ASN.1 skeleton files.
.TP
-X
Generate an XML DTD schema for the specified ASN.1 files.
.SS Warning Options
.TP
-Werror
Treat warnings as errors; abort if any warning is produced.
.TP
-Wdebug-lexer
Enable lexer debugging during the ASN.1 lexing stage.
.TP
-Wdebug-parser
Enable lexer debugging during the ASN.1 parsing stage.
.TP
-Wdebug-fixer
Enable ASN.1 syntax tree fixer debugging during the fixing stage.
.TP
-Wdebug-compiler
Enable debugging during the actual compile time.
.SS Language Options
.TP
-fbless-SIZE
Allow \f[C]SIZE()\f[R] constraint for \f[C]INTEGER\f[R],
\f[C]ENUMERATED\f[R], and other types for which this constraint is
normally prohibited by the standard.
This is a violation of ASN.1 standard, and the compiler may fail to
produce a meaningful code.
.TP
-fcompound-names
Using this option prevents name collisions in the target source code by
using complex names for target language structures.
(Name collisions may occur if the ASN.1 module reuses the same
identifiers in multiple contexts).
.TP
-findirect-choice
When generating code for a \f[C]CHOICE\f[R] type, compile the
\f[C]CHOICE\f[R] members as indirect pointers instead of declaring them
inline.
Consider using this option together with \f[B]-fno-include-deps\f[R] to
prevent circular references.
.TP
-fincludes-quoted
Refer to header files in \f[C]#include\f[R]s using
\f[B]\[lq]\f[R]double\f[B]\[rq]\f[R] instead of
\f[B]<\f[R]angle\f[B]>\f[R] quotes.
.TP
-fknown-extern-type=\f[I]name\f[R]
Pretend the specified type is known.
The compiler will assume the target language source files for the given
type have been provided manually.
.TP
-fline-refs
Include ASN.1 module\[cq]s line numbers in generated code comments.
.TP
-fno-constraints
Do not generate ASN.1 subtype constraint checking code.
This may make a shorter executable.
.TP
-fno-include-deps
Do not generate courtesy #include lines for non-critical type
dependencies.
Helps prevent namespace collisions.
.TP
-funnamed-unions
Enable unnamed unions in the definitions of target language\[cq]s
structures.
.TP
-fwide-types
Use the unbounded size data types (\f[C]INTEGER_t\f[R],
\f[C]ENUMERATED_t\f[R], \f[C]REAL_t\f[R]) by default, instead of using
the native machine\[cq]s data types (long, double).
.SS Codecs Generation Options
.TP
-no-gen-BER
Do not generate the Basic Encoding Rules (BER, X.690) support code
.TP
-no-gen-XER
Do not generate the XML Encoding Rules (XER, X.693) support code
.TP
-no-gen-OER
Do not generate the Octet Encoding Rules (OER, X.696) support code
.TP
-no-gen-UPER
Do not generate the Unaligned Packed Encoding Rules (PER, X.691) support
code
.TP
-no-gen-APER
Do not generate the Aligned Packed Encoding Rules (PER, X.691) support
code
.TP
-no-gen-print
Do not generate the print code
.TP
-no-gen-random-fill
Do not generate the random fill code
.TP
-no-gen-example
Do not generate the ASN.1 format converter example
.TP
-pdu={all|auto|\f[I]Type\f[R]}
Create a PDU table for specified types, or discover Protocol Data Units
automatically.
In case of \f[B]-pdu=all\f[R], all ASN.1 types defined in all modules
will form a PDU table.
In case of \f[B]-pdu=auto\f[R], all types not referenced by any other
type will form a PDU table.
If \f[I]Type\f[R] is an ASN.1 type identifier, the identifier is added
to the generated PDU table.
The last form may be specified multiple times to add any number of PDUs.
.SS Output Options
.TP
-print-constraints
When \f[B]-EF\f[R] options are also specified, this option forces the
compiler to explain its internal understanding of subtype constraints.
.TP
-print-lines
Generate \[lq]\f[C]-- #line\f[R]\[rq] comments in \f[B]-E\f[R] output.
.SH TRANSFER SYNTAXES
.PP
The ASN.1 family of standards define a number of ways to encode data,
including byte-oriented (e.g., BER), bit-oriented (e.g., PER), and
textual (e.g., XER).
Some encoding variants (e.g., DER) are just stricter variants of the
more general encodings (e.g., BER).
.PP
The interoperability table below specifies which API functions can be
used to exchange data in a compatible manner.
If you need to \f[I]produce\f[R] data conforming to the standard
specified in the column 1, use the API function in the column 2.
If you need to \f[I]process\f[R] data conforming to the standard(s)
specified in the column 3, use the API function specified in column 4.
See the \f[C]asn1c-usage.pdf\f[R] for details.
.PP
.TS
tab(@);
lw(14.6n) lw(18.5n) lw(13.6n) lw(13.6n).
T{
Encoding
T}@T{
API function
T}@T{
Understood by
T}@T{
API function
T}
_
T{
BER
T}@T{
der_encode()
T}@T{
BER
T}@T{
ber_decode()
T}
T{
DER
T}@T{
der_encode()
T}@T{
DER, BER
T}@T{
ber_decode()
T}
T{
CER
T}@T{
\f[I]not supported\f[R]
T}@T{
CER, BER
T}@T{
ber_decode()
T}
T{
BASIC-OER
T}@T{
oer_encode()
T}@T{
*-OER
T}@T{
oer_decode()
T}
T{
CANONICAL-OER
T}@T{
oer_encode()
T}@T{
*-OER
T}@T{
oer_decode()
T}
T{
BASIC-UPER
T}@T{
uper_encode()
T}@T{
*-UPER
T}@T{
uper_decode()
T}
T{
CANONICAL-UPER
T}@T{
uper_encode()
T}@T{
*-UPER
T}@T{
uper_decode()
T}
T{
*-APER
T}@T{
\f[I]not supported\f[R]
T}@T{
*-APER
T}@T{
\f[I]not supported\f[R]
T}
T{
BASIC-XER
T}@T{
xer_encode(\&...)
T}@T{
*-XER
T}@T{
xer_decode()
T}
T{
CANONICAL-XER
T}@T{
xer_encode (XER_F_CANONICAL)
T}@T{
*-XER
T}@T{
xer_decode()
T}
.TE
.PP
*) Asterisk means both BASIC and CANONICAL variants.
.SH SEE ALSO
.PP
\f[C]unber\f[R](1), \f[C]enber\f[R](1).
.SH AUTHORS
Lev Walkin <vlm@lionet.info>.
